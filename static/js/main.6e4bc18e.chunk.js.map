{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","images","step","frameSize","itemWidth","animationDuration","infinite","useState","currentIndex","setCurrentIndex","listRenderedStyles","width","gridTemplateColumns","length","transform","gap","transition","className","style","map","image","index","height","src","alt","String","id","cn","disabled","type","onClick","prev","document","getElementById","next","classList","contains","remove","valToMove","add","MAX_ANIMATION_SPEED","App","state","animationSpeed","updateAnimationSpeed","newValue","setState","updateInfinite","updateFrameSize","updateItemWidth","updateStep","this","onValueInput","e","maxValue","minValue","target","currentTarget","value","parseInt","preventDefault","htmlFor","name","onChange","onKeyDown","React","Component","ReactDOM","render"],"mappings":"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","file":"static/js/main.6e4bc18e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\nimport './Carousel.scss';\n\nconst ITEMS_GAP = 10;\n\ntype Props = {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n};\n\nconst Carousel: React.FC<Props> = ({\n  images,\n  step,\n  frameSize,\n  itemWidth,\n  animationDuration,\n  infinite,\n}) => {\n  const [currentIndex, setCurrentIndex] = useState(0);\n\n  const listRenderedStyles = {\n    width: frameSize * (itemWidth + ITEMS_GAP) - ITEMS_GAP,\n    gridTemplateColumns: `repeat(${images.length}, ${itemWidth}px)`,\n    transform: `translateX(${currentIndex * -(itemWidth + ITEMS_GAP)}px)`,\n    gap: `${ITEMS_GAP}px`,\n    transition: `width ${animationDuration}ms, transform ${animationDuration}ms`,\n  };\n\n  const prevButtonClick = () => {\n    const prev = document.getElementById('prev__button') as HTMLElement;\n    const next = document.getElementById('next__button') as HTMLElement;\n\n    if (next.classList.contains('disabled') && !infinite) {\n      next.classList.remove('disabled');\n    }\n\n    let valToMove = step;\n\n    if (currentIndex - step < 0) {\n      if (infinite) {\n        valToMove = currentIndex;\n      } else {\n        valToMove = currentIndex;\n      }\n    }\n\n    if (currentIndex - valToMove === 0 && !infinite) {\n      if (!prev.classList.contains('disabled')) {\n        prev.classList.add('disabled');\n      }\n    }\n\n    setCurrentIndex(currentIndex - valToMove);\n\n    return infinite;\n  };\n\n  const nextButtonClick = () => {\n    const prev = document.getElementById('prev__button') as HTMLElement;\n    const next = document.getElementById('next__button') as HTMLElement;\n\n    if (prev.classList.contains('disabled') && !infinite) {\n      prev.classList.remove('disabled');\n    }\n\n    let valToMove = step;\n\n    if (currentIndex + frameSize + step > images.length) {\n      if (infinite) {\n        valToMove = -currentIndex;\n      } else {\n        valToMove = images.length - currentIndex - frameSize;\n      }\n    }\n\n    if (currentIndex + valToMove + frameSize === images.length && !infinite) {\n      if (!next.classList.contains('disabled')) {\n        next.classList.add('disabled');\n      }\n    }\n\n    setCurrentIndex(currentIndex + valToMove);\n  };\n\n  return (\n    <div className=\"Carousel\">\n      <div className=\"Carousel__container\">\n        <ul className=\"Carousel__list\" style={listRenderedStyles}>\n          {images.map((image, index) => (\n            <li className=\"Carousel__item\" key={image}>\n              <img\n                width={itemWidth}\n                height={itemWidth}\n                src={image}\n                alt={String(index)}\n              />\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div className=\"Carousel__buttons\">\n        <button\n          id=\"prev__button\"\n          className={cn('Carousel__button', {\n            disabled: (currentIndex === 0 && !infinite)\n            || frameSize === images.length,\n          })}\n          type=\"button\"\n          onClick={prevButtonClick}\n        >\n          ðŸ¡¸ Prev\n        </button>\n        <button\n          data-cy=\"next\"\n          id=\"next__button\"\n          className={cn('Carousel__button', {\n            disabled: (currentIndex + frameSize === images.length && !infinite)\n            || frameSize === images.length,\n          })}\n          type=\"button\"\n          onClick={nextButtonClick}\n        >\n          Next ðŸ¡º\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\ninterface State {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  infinite: boolean;\n  animationSpeed: number;\n}\n\nconst MAX_STEP = 9;\nconst MIN_STEP = 1;\nconst MAX_ANIMATION_SPEED = 5000;\nconst MIN_ANIMATION_SPEED = 100;\nconst MAX_FRAME_SIZE = 10;\nconst MIN_FRAME_SIZE = 1;\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    animationSpeed: 1000,\n    infinite: false,\n    frameSize: 3,\n    itemWidth: 130,\n    step: 3,\n  };\n\n  updateAnimationSpeed = (newValue: number) => {\n    if (newValue >= MIN_ANIMATION_SPEED && newValue <= MAX_ANIMATION_SPEED) {\n      this.setState({ animationSpeed: newValue });\n    }\n  };\n\n  updateInfinite = (newValue: boolean) => {\n    this.setState({ infinite: newValue });\n  };\n\n  updateFrameSize = (newValue: number) => {\n    if (newValue >= MIN_FRAME_SIZE && newValue <= MAX_FRAME_SIZE) {\n      this.setState({ frameSize: newValue });\n    }\n  };\n\n  updateItemWidth = (newValue: number) => {\n    this.setState({ itemWidth: newValue });\n  };\n\n  updateStep = (newValue: number) => {\n    if (newValue >= MIN_STEP && newValue <= MAX_STEP) {\n      this.setState({ step: newValue });\n    }\n  };\n\n  render() {\n    const {\n      images,\n      animationSpeed,\n      infinite,\n      frameSize,\n      itemWidth,\n      step,\n    } = this.state;\n\n    const onValueInput = (e: React.KeyboardEvent<HTMLInputElement>,\n      maxValue: number,\n      minValue: number) => {\n      const target = e.currentTarget;\n      const value = parseInt(target.value, 10);\n\n      if (value > maxValue || value < minValue) {\n        e.preventDefault();\n      }\n    };\n\n    return (\n      <div className=\"App animated\">\n        <h1\n          className=\"App__title\"\n          data-cy=\"title\"\n        >\n          {`Carousel with ${images.length} images`}\n        </h1>\n        <div className=\"controls\">\n          <div className=\"controls__container controls__width\">\n            <label\n              className=\"controls__label\"\n              htmlFor=\"itemId\"\n            >\n              Item width:\n            </label>\n            <input\n              id=\"itemId\"\n              className=\"controls__input\"\n              name=\"itemId\"\n              type=\"number\"\n              value={itemWidth}\n              onChange={(e) => {\n                this.updateItemWidth(parseInt(e.currentTarget.value, 10));\n              }}\n            />\n          </div>\n          <div className=\"controls__container controls__frame\">\n            <label\n              className=\"controls__label\"\n              htmlFor=\"frameId\"\n            >\n              Frame size:\n            </label>\n            <input\n              id=\"frameId\"\n              className=\"controls__input\"\n              name=\"frameId\"\n              type=\"number\"\n              value={frameSize}\n              onKeyDown={(e) => onValueInput(e, MAX_FRAME_SIZE, MIN_FRAME_SIZE)}\n              onChange={(e) => {\n                this.updateFrameSize(parseInt(e.currentTarget.value, 10));\n              }}\n            />\n          </div>\n          <div className=\"controls__container controls__step\">\n            <label\n              className=\"controls__label\"\n              htmlFor=\"stepId\"\n            >\n              Step:\n            </label>\n            <input\n              id=\"stepId\"\n              className=\"controls__input\"\n              name=\"stepId\"\n              type=\"number\"\n              value={step}\n              onKeyDown={(e) => onValueInput(e, MAX_STEP, MIN_STEP)}\n              onChange={(e) => {\n                this.updateStep(parseInt(e.currentTarget.value, 10));\n              }}\n            />\n          </div>\n          <div className=\"controls__container controls__animation\">\n            <label\n              className=\"controls__label\"\n              htmlFor=\"animation\"\n            >\n              Animation speed:\n            </label>\n            <input\n              className=\"controls__input\"\n              id=\"animation__input\"\n              name=\"animation\"\n              type=\"number\"\n              value={animationSpeed}\n              onKeyDown={(e) => {\n                onValueInput(e, MAX_ANIMATION_SPEED, MIN_ANIMATION_SPEED);\n              }}\n              onChange={(e) => {\n                this.updateAnimationSpeed(parseInt(e.currentTarget.value, 10));\n              }}\n            />\n          </div>\n          <div className=\"controls__container controls__infinite\">\n            <label\n              className=\"controls__label\"\n              htmlFor=\"infinite\"\n            >\n              Infinite:\n            </label>\n            <label className=\"switch\">\n              <input\n                className=\"controls__input controls__input--checkbox\"\n                name=\"infinite\"\n                type=\"checkbox\"\n                onChange={() => {\n                  this.updateInfinite(!infinite);\n                }}\n              />\n              <span className=\"slider round\" />\n            </label>\n          </div>\n        </div>\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationSpeed}\n          infinite={infinite}\n        />\n        <div className=\"App__info\">\n          <p className=\"App_info-paragraph\">\n            *use &quot;ArrowUp&quot; and &quot;ArrowDown&quot;\n            when field is focused to change values\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}